@use "sass:math";

// Remplacement de chaine
@function str-replace($string, $search, $replace: "") {
  $index: str_index($string, $search);
  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }
  @return $string;
}

// Manage fonts format for @font-face
@mixin font-face($name, $path, $weight: null, $style: null, $exts: woff2 woff ttf svg) {
  $src: null;

  $extmods: (
          eot: "?",
          svg: "#" + str-replace($name, " ", "_")
  );

  $formats: (
          otf: "opentype",
          ttf: "truetype",
  );

  @each $ext in $exts {
    $extmod: if(map_has_key($extmods, $ext), $ext + map_get($extmods, $ext), $ext);
    $format: if(map_has_key($formats, $ext), $ext + map_get($formats, $ext), $ext);
    $src: append($src, url(quote($path + "." + $extmod)) format(quote($format)), comma)
  }

  @font-face {
    font-family: quote($name);
    font-style: $style;
    font-weight: $weight;
    src: $src;
  }

}

// Manage media query
@function strip-unit($number){
  @if type_of($number) == 'number' and not unitless($number){
    @return $number / ($number * 0 + 1);
  }
  @return $number;
}
@mixin up($size) {
  $size: strip-unit($size);
  @media (min-width: $size + 1px) { @content; }
}
@mixin down($size) {
  $size: strip-unit($size);
  @media (max-width: $size + 1px) { @content; }
}

// Transforme font-size in pixel to rem
@mixin fsToRem($value) {
  font-size: math.div($value, $main-txt) + rem;
}

// Animated underlined one line
@mixin underlined ($color-one, $color-two, $height: 1px) {
  transition: all 0.2s ease-in-out;
  position: relative;
  &:before,
  &:after {
    content: "";
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 0;
    height: $height;
    transition: all 0.2s ease-in-out;
    opacity: 0;
    background-image: linear-gradient(to right, $color-one, $color-two);
  }
  &:hover {
    &:before,
    &:after {
      width: 100%;
      opacity: 1;
    }
  }
}

// Animated underlined effect multiline height auto from font-size (%)
@mixin multi-underlined($color-one, $color-two, $height: 10%, $hover-width: 100%) {
  display: inline;
  text-decoration: none;
  background: linear-gradient(to top, $color-one 0%, $color-two $height, transparent ($height + 0.1)) no-repeat;
  background-size: 0 100%;
  transition: background-size 0.3s;
  &:hover {
    background-size: $hover-width 100%;
  }
}

// Animated border
@mixin magic-border($width, $duration, $direction, $color1, $color2){
  position:relative;
  &:before{
    content:'';
    position:absolute;
    width:calc(100% + #{$width * 2});
    height:calc(100% + #{$width * 2});
    top:calc(#{$width}/-1);
    left:calc(#{$width}/-1);
    background:
            linear-gradient(to right, $color1 0%, $color2 100%),
            linear-gradient(to top, $color1 50%, transparent 50%),
            linear-gradient(to top, $color2 50%, transparent 50%),
            linear-gradient(to right, $color1 0%, $color2 100%),
            linear-gradient(to left, $color1 0%, $color1 100%);
    background-size:100% $width, $width 200%, $width 200%, 0% $width, 0% $width;
    background-position:50% 100%, 0% 0%, 100% 0%, 100% 0%, 0% 0%;
    background-repeat:no-repeat, no-repeat;
    transition:transform $duration ease-in-out, background-position $duration ease-in-out, background-size $duration ease-in-out;
    transform:scaleX(0) rotate(180deg * $direction);
    transition-delay:$duration*2, $duration, 0s;
  }
  &:hover{
    &:before{
      background-size:200% $width, $width 400%, $width 400%, 55% $width, 55% $width;
      background-position:50% 100%, 0% 100%, 100% 100%, 100% 0%, 0% 0%;
      transform:scaleX(1) rotate(180deg * $direction);
      transition-delay:0s, $duration, $duration*2;
    }
  }
}